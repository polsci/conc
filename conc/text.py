"""Text document display class."""

# AUTOGENERATED! DO NOT EDIT! File to edit: ../nbs/55_text.ipynb.

# %% ../nbs/55_text.ipynb 3
from __future__ import annotations
from fastcore.basics import patch
import numpy as np
from IPython.display import display, HTML

# %% auto 0
__all__ = ['Text']

# %% ../nbs/55_text.ipynb 6
class Text:
	""" Class to represent text documents """
	def __init__(self,
			  tokens:np.ndarray, # list of token strs
			  has_spaces: np.ndarray # whether token strs followed by space
			  ): 
		self.tokens = tokens
		self.has_spaces = has_spaces


# %% ../nbs/55_text.ipynb 7
@patch
def _nl2br(self:Text,
           text:str # document text
           ):
    text = text.replace('\r\n', '\n').replace('\r', '\n')
    return text.replace('\n', '<br>\n')

# %% ../nbs/55_text.ipynb 8
@patch
def _div(self:Text,
         text:str, # document text
         class_str:str = '' # div class
         ):
    """ Wrap text in div, with optional class """
    if class_str != '':
        class_str = f' class="{class_str}"'
    return f'<div{class_str}>{text}</div>'

# %% ../nbs/55_text.ipynb 9
@patch
def as_string(self:Text,
        ):
    """ Return the text as a string """

    interleaved = np.empty((self.tokens.size + self.has_spaces.size,), dtype=self.tokens.dtype)
    interleaved[0::2] = self.tokens
    interleaved[1::2] = np.where(self.has_spaces, ' ', '')

    return ''.join(list(interleaved))

# %% ../nbs/55_text.ipynb 10
@patch
def as_tokens(self:Text,
        ):
    """ Return the text as a tokens """

    return list(self.tokens)

# %% ../nbs/55_text.ipynb 11
@patch
def __str__(self:Text):
    return self.as_string()

# %% ../nbs/55_text.ipynb 12
@patch
def tokens_count(self:Text):
    return len(self.tokens)

# %% ../nbs/55_text.ipynb 13
@patch
def display(self:Text,
                ):
    """ Output a text """
    style = '<style>.conc-text {white-space: pre-wrap;}</style>\n'
    display(HTML(style + self._div(self.as_string(), class_str = 'conc-text')))

