# AUTOGENERATED! DO NOT EDIT! File to edit: ../nbs/60_result.ipynb.

# %% auto 0
__all__ = ['Result']

# %% ../nbs/60_result.ipynb 3
import polars as pl
from fastcore.basics import patch
from great_tables import GT

# %% ../nbs/60_result.ipynb 4
class Result:
	def __init__(self,
			  type: str, # report type
			  df: pl.DataFrame, # Polars dataframe with the results
			  title: str, # title of the report
			  description: str, # description
			  summary_data: dict, # summary data (ignored)
			  formatted_data: list[str] # list of formatted data about the table
			  ): 

		""" Class for results from Conc reports """
		self.type = type
		self.df = df
		self.title = title
		self.description = description
		self.summary_data = summary_data
		self.formatted_data = formatted_data


# %% ../nbs/60_result.ipynb 5
@patch
def display(self: Result
			   ):
	""" Print analysis result output from conc in a nice table format using the great_tables library """
	
	self.df.columns = [col.replace('_', ' ').title() for col in self.df.columns]

	columns_with_decimals = []
	for col in self.df.columns:
		if self.df[col].dtype == pl.Float64:
			columns_with_decimals.append(col)

	gt = GT(self.df).tab_options(table_margin_left = 0)
	if self.title != '' or self.description != '':
		gt = gt.tab_header(self.title, self.description)

	if len(columns_with_decimals) > 0:
		gt = gt.fmt_number(columns_with_decimals, decimals=2)
	for value in self.formatted_data:
		gt = gt.tab_source_note(value)

	if self.type == 'concordance':
		if 'Left' in self.df.columns:
			gt = gt.cols_align(align='right', columns=['Left'])
		if 'Keyword' in self.df.columns:
			gt = gt.cols_align(align='center', columns=['Keyword'])
	gt.show()
